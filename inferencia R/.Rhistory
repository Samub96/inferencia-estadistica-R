desviacion<-sd(data$price)
errorst<-desviacion/sqrt(n)
lim_inf<-media-(t_critico*errorst)
lim_sup<-media+(t_critico*errorst)
interval_m<-data.frame(n, media, desviacion, t_critico, errorst, lim_inf, lim_sup)
interval_m
#Se puede concluir que el promedio del precio de la población de autos usados está
#entre 17491 y 17349
mean(data$price)
media<-mean(data$price)
t_critico <- qt(0.025, df = length(data)-1)
length(data$price)
sd(data$price)
desviacion<-sd(data$price)
errorst<-desviacion/sqrt(n)
lim_inf<-media-(t_critico*errorst)
lim_sup<-media+(t_critico*errorst)
interval_m<-data.frame(n, media, desviacion, t_critico, errorst, lim_inf, lim_sup)
interval_m
#Se puede concluir que el promedio del precio de la población de autos usados está
#entre 17491 y 17349
mean(data$price)
media<-mean(data$price)
t_critico <- qt(0.025, df = length(data)-1)
length(data$price)
sd(data$price)
desviacion<-sd(data$price)
errorst<-desviacion/sqrt(n)
lim_inf<- media-(t_critico*errorst)
lim_sup<- media+(t_critico*errorst)
interval_m<-data.frame(n, media, desviacion, t_critico, errorst, lim_sup, lim_inf)
interval_m
print("Se puede concluir que el promedio del precio de la población de autos usados está entre 22005.57 y 21038.56")
mean(data$price)
media<-mean(data$price)
t_critico <- qt(0.025, df = length(data)-1)
length(data$price)
sd(data$price)
desviacion<-sd(data$price)
errorst<-desviacion/sqrt(n)
lim_inf<- media-t_critico*errorst
lim_sup<- media+t_critico*errorst
interval_m<-data.frame(n, media, desviacion, t_critico, errorst, lim_inf, lim_sup)
interval_m
print("Se puede concluir que el promedio del precio de la población de autos usados está entre 22005.57 y 21038.56")
mean(data$price)
media<-mean(data$price)
t_critico <- qt(0.025, df = length(data)-1)
length(data$price)
sd(data$price)
desviacion<-sd(data$price)
errorst<-desviacion/sqrt(n)
lim_inf<- media+t_critico*errorst
lim_sup<- media-t_critico*errorst
interval_m<-data.frame(n, media, desviacion, t_critico, errorst, lim_inf, lim_sup)
interval_m
print("Se puede concluir que el promedio del precio de la población de autos usados está entre 22005.57 y 21038.56")
nFord <- sum(data$Make == "Ford")
result <- prop.test(nFord, n, p=0.5, alternative= "two.sided", conf.level=0.95, correct=FALSE)
print(result)
nFord <- sum(data$Make == "Ford")
result <- prop.test(nFord, n, p=0.5, alternative= "two.sided", conf.level=0.95, correct=FALSE)
print(result)
print("El intervalo para la proporción de autos Ford está entre 0.2286801 y 0.2637388")
n<-length(data$price)
variedad_motores <- data %>%
group_by(data$Make) %>%
summarise(Variedad_Motores = n_distinct(data$engineSize))
# Ordenar por la variedad de motores en orden descendente
variedad_motores <- variedad_motores %>%
arrange(desc(Variedad_Motores))
variedad_motores
mean(data$price)
media<-mean(data$price)
t_critico <- qt(0.025, df = length(data)-1)
length(data$price)
sd(data$price)
desviacion<-sd(data$price)
errorst<-desviacion/sqrt(n)
lim_inf<- media+t_critico*errorst
lim_sup<- media-t_critico*errorst
interval_m<-data.frame(n, media, desviacion, t_critico, errorst, lim_inf, lim_sup)
interval_m
print("Se puede concluir que el promedio del precio de la población de autos usados está entre 21038.56 y 22005.57")
library(readr)
library(tidyverse)
library(dplyr)
library(xts)
library(psych)
library(gmodels)
library(MASS)
library(fitdistrplus)
library(lmtest)
library(fdth)
library(ggplot2)
library(plotly)
library(PASWR2)
library(lattice)
library(descr)
library(openxlsx)
library(kableExtra)
library(pastecs)
library(multcomp)
#Asignar directorio de trabajo
setwd('C:/Universidad/Universidad/Inferencia Estadistica/inferencia-estadistica-R/inferencia R')
#Comprobar directorio de trabajo
getwd()
datos <-  read_csv("datos_reducidos2.csv", show_col_types = FALSE)
#view(datos)
attach(datos)
data  <- datos %>%
filter(year >= 2018 & year <= 2020)
attach(data)
tablaTransmision = data %>% group_by(transmission) %>%
summarize(frec_abs=n()) %>%
mutate(frec_rel=frec_abs/sum(frec_abs)*100)
tablaTransmision
ggplot(tablaTransmision, aes(x=transmission, y=frec_abs, label=paste0(frec_abs),color=transmission)) +
geom_bar(stat='identity', fill='lightblue') +
geom_text(vjust=1.5) +
labs(x='Transmisión', y='Frecuencia absoluta', title='Transmisión') +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
tablaMarca = data %>% group_by(Make) %>%
summarize(frec_abs=n()) %>%
mutate(frec_rel=frec_abs/sum(frec_abs)*100)
tablaMarca
colores_personalizados <- c("BMW" = "aquamarine", "Ford" = "turquoise", "Hyundai" = "cyan4",
"audi" = "lightblue", "skoda" = "lightblue2", "toyota" = "lightskyblue2",
"vw" = "turquoise2")
ggplot(tablaMarca, aes(x = Make, y = frec_abs, fill = Make)) +
geom_bar(stat = 'identity') +
geom_text(aes(label = frec_abs), vjust = 1.5) +
labs(x = 'Marca', y = 'Frecuencia absoluta', title = 'Marca') +
scale_fill_manual(values = colores_personalizados) +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
tablaCombustible = data %>% group_by(fuelType) %>%
summarize(frec_abs=n()) %>%
mutate(frec_rel=frec_abs/sum(frec_abs)*100)
tablaCombustible
colores_personalizados <- c("Diesel" = "indianred", "Electric" = "orange2", "Hybrid" = "red3", "Other" = "brown", "Petrol" = "lightsalmon2")
ggplot(tablaCombustible, aes(x = fuelType, y = frec_abs, fill = fuelType)) +
geom_bar(stat = 'identity') +
geom_text(aes(label = frec_abs), vjust = 1.5) +
labs(x = 'Tipo de combustible', y = 'Frecuencia absoluta', title = 'Tipo de combustible') +
scale_fill_manual(values = colores_personalizados) +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggplot(data, aes(x = price)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
labs(title = "Histograma del precio", x = "Precio", y = "Frecuencia")
View(tablaMarca)
View(tablaCombustible)
View(tablaCombustible)
View(tablaCombustible)
View(shapiro_test)
View(tablaCombustible)
View(tablaMarca)
View(variedad_motores)
ggplot(data, aes(x = price)) +
geom_density(fill = "skyblue", color = "blue") +
labs(title = "Diagrama de densidad del precio", x = "precio", y = "Densidad")
ggplot(data, aes(y = price)) +
geom_boxplot(fill = "skyblue", color = "blue") +
labs(title = "Diagrama de cajas del Precio", y = "Precio")
qqnorm(data$price, main = "Q-Q Plot para el precio")
qqline(data$price, col = "red")
# max  y min
min <- min(price)
max <- max(price)
# Rango intercuartil
rango <- max-min
#Media
media <- mean(price)
print(paste("Media", media))
#Mediana
mediana <- median(price)
print(paste("Mediana", mediana))
#Desviación estándar
desv_estandar <- sd(price)
print(paste("desviación estándar" , desv_estandar))
#Coeficiente de variación
coef_var <- (desv_estandar/media)*100
print(paste("Coeficiente de variación" , coef_var))
#Simetria
coeficiente_simetria <- skew(data$price)
print(paste("Coeficiente de simetría" , coeficiente_simetria))
#Cuartil 1
q1 <- unname(quantile(price, 0.25))
print(paste("cuartil 1" ,q1))
#Cuartil 3
q3 <- unname(quantile(price, 0.75))
print(paste("Cuartil 3" , q3))
#Rango intercuartil
ric <- q3 - q1
print(paste("Rango intercuartil" , ric))
#Cerco inferior
cerco_inf <- q1 - 1.5*ric
print(paste("Cerco inferior",cerco_inf))
#Cerco superior
cerco_sup <- q3 + 1.5*ric
print(paste("Cerco superior" , cerco_sup))
atipicos <- filter(data, price<cerco_inf | price>cerco_sup)
datos_sinatipicos <- filter(data,price>=cerco_inf & price<=cerco_sup)
max <- max(datos_sinatipicos$`price`)
max
summary(datos_sinatipicos$price)
descriptivas <- stat.desc(datos_sinatipicos$price)
descriptivas
options(scipen = 999999)
ggplot(data, aes(x = engineSize)) +
geom_histogram(binwidth = 0.5, fill = "lightblue", color = "black") +
labs(title = "Histograma del tamaño del motor", x = "Tamaño del motor", y = "Frecuencia")
ggplot(data, aes(x = engineSize)) +
geom_density(fill = "skyblue", color = "blue") +
labs(title = "Diagrama de densidad del tamaño del motor", x = "Tamaño del motor", y = "Densidad")
ggplot(data, aes(y = engineSize)) +
geom_boxplot(fill = "skyblue", color = "blue") +
labs(title = "Diagrama de cajas del tamaño del motor", y = "Tamaño del motor")
qqnorm(data$engineSize, main = "Q-Q Plot para el tamaño del motor")
qqline(data$engineSize, col = "red")
# max  y min
min <- min(engineSize)
max <- max(engineSize)
# Rango intercuartil
rango <- max-min
#Media
media <- mean(engineSize)
print(paste("Media", media))
# Mediana
mediana <- median(engineSize)
print(paste("Mediana", mediana))
#Desviación estándar
desv_estandar <- sd(engineSize)
print(paste("desviación estándar" , desv_estandar))
#Coeficiente de variación
coef_var <- (desv_estandar/media)*100
print(paste("Coeficiente de variación" , coef_var))
#Simetria
coeficiente_simetria <- skew(data$engineSize)
print(paste("Coeficiente de simetría" , coeficiente_simetria))
#Cuartil 1
q1 <- unname(quantile(engineSize, 0.25))
print(paste("cuartil 1" ,q1))
#Cuartil 3
q3 <- unname(quantile(engineSize, 0.75))
print(paste("Cuartil 3" , q3))
#Rango intercuartil
ric <- q3 - q1
print(paste("Rango intercuartil" , ric))
#Cerco inferior
cerco_inf <- q1 - 1.5*ric
print(paste("Cerco inferior",cerco_inf))
#Cerco superior
cerco_sup <- q3 + 1.5*ric
print(paste("Cerco superior" , cerco_sup))
#Evaluar cercos
atipicos <- filter(data, engineSize<cerco_inf | engineSize>cerco_sup)
datos_sinatipicos3 <- filter(data,engineSize>=cerco_inf & engineSize<=cerco_sup)
max <- max(datos_sinatipicos3$`engineSize`)
max
summary(datos_sinatipicos3$engineSize)
descriptivas3 <- stat.desc(datos_sinatipicos3$engineSize)
descriptivas3
options(scipen = 999999)
mielage <- data.frame(data$mileage)
ggplot(mielage, aes(x = mileage)) +
geom_histogram(binwidth = 0.5, fill = "lightblue", color = "black") +
labs(title = "Histograma del Kilometraje", x = "Kilometraje del carro", y = "Frecuencia")
ggplot(data, aes(x = mileage)) +
geom_density(fill = "skyblue", color = "blue") +
labs(title = "Diagrama de densidad del kilometraje", x = "Kilometraje", y = "Densidad")
ggplot(data, aes(y = mileage)) +
geom_boxplot(fill = "skyblue", color = "blue") +
labs(title = "Diagrama de cajas del Kilometraje", y = "Kilometraje")
qqnorm(data$mileage, main = "Q-Q Plot para el Kilometraje")
qqline(data$mileage, col = "red")
# max  y min
min <- min(mileage)
max <- max(mileage)
# Rango intercuartil
rango <- max-min
#Media
media <- mean(mileage)
print(paste("Media", media))
# Mediana
mediana <- median(mileage)
print(paste("Mediana", mediana))
#Desviación estándar
desv_estandar <- sd(mileage)
print(paste("desviación estándar" , desv_estandar))
#Coeficiente de variación
coef_var <- (desv_estandar/media)*100
print(paste("Coeficiente de variación" , coef_var))
#Simetria
coeficiente_simetria <- skew(data$mileage)
print(paste("Coeficiente de simetría" , coeficiente_simetria))
#Cuartil 1
q1 <- unname(quantile(mileage, 0.25))
print(paste("cuartil 1" ,q1))
#Cuartil 3
q3 <- unname(quantile(mileage, 0.75))
print(paste("Cuartil 3" , q3))
#Rango intercuartil
ric <- q3 - q1
print(paste("Rango intercuartil" , ric))
#Cerco inferior
cerco_inf <- q1 - 1.5*ric
print(paste("Cerco inferior",cerco_inf))
#Cerco superior
cerco_sup <- q3 + 1.5*ric
print(paste("Cerco superior" , cerco_sup))
#Evaluar cercos
atipicos <- filter(data, mileage<cerco_inf |mileage>cerco_sup)
datos_sinatipicos2 <- filter(data,mileage>=cerco_inf & mileage<=cerco_sup)
max <- max(datos_sinatipicos3$`mileage`)
max
summary(datos_sinatipicos3$mileage)
descriptivas2 <- stat.desc(datos_sinatipicos2$mileage)
descriptivas3-2
options(scipen = 999999)
ggplot(data, aes(x = engineSize, y = price, color = factor(transmission))) +
geom_point() +
labs(title = "Precio vs. Tamaño del Motor por Tipo de Transmisión",
x = "Tamaño del Motor", y = "Precio", color = "Tipo de Transmisión") +
theme_minimal()
#tipo de combustible con respecto al tamaño del motor
ggplot(data, aes(x = engineSize, y = factor(fuelType), color = fuelType)) +
geom_point(size = 3) +
labs(title = "Relación entre Tamaño del Motor y Tipo de Combustible",
x = "Tamaño del Motor",
y = "Tipo de Combustible") +
theme_minimal()
#tipo de combustible por marca de auto
ggplot(data, aes(x = factor(Make), fill = fuelType)) +
geom_bar(position = "stack") +
labs(title = "Tipos de Combustibles por Marca de Auto", x = "Marca", y = "Cantidad") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Gráfico de dispersión para la relación entre el tamaño del motor (engineSize) y el precio (price):
ggplot(data, aes(x = engineSize, y = price)) +
geom_point(color = "purple") +
labs(title = "Diagrama de Dispersión de Tamaño del Motor vs Precio", x = "Tamaño del Motor", y = "Precio")
#Boxplot para visualizar la distribución de precios (price) por tipo de combustible (fuelType):
ggplot(data, aes(x = fuelType, y = price)) +
geom_boxplot(fill = "yellow") +
labs(title = "Distribución de Precios por Tipo de Combustible", x = "Tipo de Combustible", y = "Precio")
mean(data$price)
media<-mean(data$price)
t_critico <- qt(0.025, df = length(data)-1)
length(data$price)
sd(data$price)
desviacion<-sd(data$price)
errorst<-desviacion/sqrt(n)
lim_inf<- media+t_critico*errorst
lim_sup<- media-t_critico*errorst
interval_m<-data.frame(n, media, desviacion, t_critico, errorst, lim_inf, lim_sup)
interval_m
print("Se puede concluir que el promedio del precio de la población de autos usados está entre 21038.56 y 22005.57")
nFord <- sum(data$Make == "Ford")
result <- prop.test(nFord, n, p=0.5, alternative= "two.sided", conf.level=0.95, correct=FALSE)
print(result)
print("El intervalo de proporción de autos Ford está entre 0.2286801 y 0.2637388")
print("H_0: μ =< 16000")
print("H_1: μ > 1600")
summary(data$mileage)
# Hipotesis para la muestra usando t-student
t.test(data$mileage, mu=16000,  alternative = "greater")
# Valor critico de t
qt (p = 0.95, df = 380, lower.tail = TRUE)
print("Se rechaza H_0 debido a que el valor p < α. Lo que quiere decir que el Kilometraje de la población es mayor a 16000 millas")
print("H_0: \pi =< 0.5")
print("H_0: \pi =< 0.5")
print("Prueba de ANOVA entre las medias poblacionales de los precios de los autos agrupados por marca")
"H_0: μ_1 = μ_2 = μ_3 = μ_4 = μ_5 = μ_6 = μ_7"
"H_1: Al menos dos de las medias poblacionales de los precios de los autos agrupados por marca son diferentes"
# Convertir 'Make' a factor
data$Make <- as.factor(data$Make)
# Boxplot
boxplot(price ~ Make, data = data, main = "Boxplot de Precio por Marca", xlab = "Marca", ylab = "Precio")
# Promedio por marca
mean_by_make <- tapply(data$price, data$Make, mean)
print("Promedio de precio por marca:")
print(mean_by_make)
# ANOVA
modelo_anova <- aov(lm(price ~ Make, data = data))
summary(modelo_anova)
# Test de Tukey
tukey_results <- TukeyHSD(modelo_anova)
# Imprimir los resultados del Test de Tukey
cat("Resultados del Test de Tukey:\n")
print(tukey_results)
print("Las medias iguales son: BMW-audi, Hyundai-Ford, toyota-Ford, skoda-Hyundai, toyota-Hyundai, toyota-skoda, ")
print("Prueba de coeficiente correlación entre el Kilometraje y el precio de los autos")
print("H_0: \rho = 0")
print("H_1: \rho \neq 0")
plot(data$mileage,data$price, col = "blue" ,xlab = "Kilometraje", ylab = "Precio")
# Realizar la prueba de correlación
correlation_test <- cor.test(data$mileage, data$price)
# Imprimir los resultados de la prueba
print(correlation_test)
print("Se rechaza H_0, lo que significa que hay una correlación entre kilometraje y el precio de los automoviles usados, esta correlación corresponde a una correlación debil e inversa ya que r=-0.30")
# Hipótesis nula y alternativa
print("H_0: \beta_1 = 0")
print("H_1: \beta_1 \neq 0")
options(scipen = 999)
# Definir la fórmula de la regresión lineal simple
cat("ŷ = β₀ + β₁ * x")
# Crear un modelo de regresión lineal
modelo <- lm(price ~ mileage, data = data)
# Imprimir un resumen del modelo
summary(modelo)
intercepto <- coef(modelo)[1]
pendiente <- coef(modelo)[2]
# Determinar el signo del coeficiente de la pendiente
signo <- ifelse(pendiente >= 0, "+", "-")
# Imprimir la ecuación de la recta
pendiente <- paste("ŷ=", round(intercepto, 2), signo, abs(round(pendiente, 2)),"x")
print("Se rechaza H_0 debido a que el valor p < α, por lo que β₀ es significativo en el modelo")
print("Ecuación lineal del modelo: ")
cat("ŷ = β₀ + β₁ * x")
print(pendiente)
# Graficar los datos
plot(data$mileage, data$price, main = pendiente, xlab = "Kilometraje", ylab = "Precio", pch = 1, col = "blue")
# Agregar la línea de regresión al gráfico
abline(modelo, col = "red")
print("H_0: Los residuos presentan una distribución normal")
print("H_1: Los residuos no presentan una distribución normal")
residuos <- resid(modelo)
# Prueba de normalidad de Shapiro-Wilk
shapiro_test <- shapiro.test(residuos)
# Imprimir el resultado de la prueba
print(shapiro_test)
print("Se rechaza H_0, debido a que el valor p > α. Por ello, los residuos no se distribuyen de manera normal")
print("H_0: La varianza de los errores es constante (homocedasticidad)")
print("H_1: La varianza de los errores no es constante (heterocedasticidad)")
residuos <- resid(modelo)
# Prueba de Breusch-Pagan
breusch_pagan_test <- lmtest::bptest(modelo)
# Imprimir el resultado de la prueba
print(breusch_pagan_test)
print("Se rechaza H0, debido a que el valor p > α. Por ello, los residuos presentan heterocedasticidad, es decir, no presentan varianzas constantes")
# Hipótesis nula y alternativa
print("H_0: \beta_1 = 0")
print("H_1: \beta_1 \neq 0")
options(scipen = 999)
# Definir la fórmula de la regresión lineal simple
cat("ŷ = β₀ + β₁ * x")
# Crear un modelo de regresión lineal
modelo <- lm(price ~ mileage, data = data)
# Imprimir un resumen del modelo
summary(modelo)
intercepto <- coef(modelo)[1]
pendiente <- coef(modelo)[2]
# Determinar el signo del coeficiente de la pendiente
signo <- ifelse(pendiente >= 0, "+", "-")
# Imprimir la ecuación de la recta
pendiente <- paste("ŷ=", round(intercepto, 2), signo, abs(round(pendiente, 2)),"x")
print("Se rechaza H_0 debido a que el valor p < α, por lo que β₀ es significativo en el modelo")
print("Ecuación lineal del modelo: ")
cat("ŷ = β₀ + β₁ * x\n")
print(pendiente)
# Graficar los datos
plot(data$mileage, data$price, main = pendiente, xlab = "Kilometraje", ylab = "Precio", pch = 1, col = "blue")
# Agregar la línea de regresión al gráfico
abline(modelo, col = "red")
# Hipótesis nula y alternativa
print("H_0: \beta_1 = 0")
print("H_1: \beta_1 \neq 0")
options(scipen = 999)
# Crear un modelo de regresión lineal
modelo <- lm(price ~ mileage, data = data)
# Imprimir un resumen del modelo
summary(modelo)
intercepto <- coef(modelo)[1]
pendiente <- coef(modelo)[2]
# Determinar el signo del coeficiente de la pendiente
signo <- ifelse(pendiente >= 0, "+", "-")
# Imprimir la ecuación de la recta
pendiente <- paste("ŷ=", round(intercepto, 2), signo, abs(round(pendiente, 2)),"x")
print("Se rechaza H_0 debido a que el valor p < α, por lo que β₀ es significativo en el modelo")
print("Ecuación lineal del modelo: ")
cat("ŷ = β₀ + β₁ * x\n")
print(pendiente)
# Graficar los datos
plot(data$mileage, data$price, main = pendiente, xlab = "Kilometraje", ylab = "Precio", pch = 1, col = "blue")
# Agregar la línea de regresión al gráfico
abline(modelo, col = "red")
print("Prueba de ANOVA entre las medias poblacionales de los precios de los autos agrupados por marca")
"H_0: μ_1 = μ_2 = μ_3 = μ_4 = μ_5 = μ_6 = μ_7"
"H_1: Al menos dos de las medias poblacionales de los precios de los autos agrupados por marca son diferentes"
# Convertir 'Make' a factor
data$Make <- as.factor(data$Make)
# Boxplot
boxplot(price ~ Make, data = data, main = "Boxplot de Precio por Marca", xlab = "Marca", ylab = "Precio")
# Promedio por marca
mean_by_make <- tapply(data$price, data$Make, mean)
print("Promedio de precio por marca:")
print(mean_by_make)
# ANOVA
modelo_anova <- aov(lm(price ~ Make, data = data))
summary(modelo_anova)
# Test de Tukey
tukey_results <- TukeyHSD(modelo_anova)
# Imprimir los resultados del Test de Tukey
cat("Resultados del Test de Tukey:\n")
print(tukey_results)
print("Las medias iguales son: BMW-audi, Hyundai-Ford, toyota-Ford, skoda-Hyundai, toyota-Hyundai, toyota-skoda, ")
View(data)

library(tidyverse)
library(dplyr)
library(xts)
library(psych)
library(gmodels)
library(MASS)
library(fitdistrplus)
library(lmtest)
library(fdth)
library(readxl)
library(ggplot2)
library(plotly)
library(PASWR2)
library(lattice)
library(descr)
library(openxlsx)
library(kableExtra)
library(pastecs)
#directorio de trabajo
setwd('C:/Users/Admin/Desktop/R/inferencia-estadistica-R/ejemplo hipotesis')
#directorio en el que se est? trabajando
getwd()
datos <- read_excel("datos.xlsx")
View(datos)
#calcular las estad?sticas descriptivas
desc <- summary(datos, datos$`PESO PERDIDO`)
desc
attach(datos)
#M?nimo
min <- min(`PESO PERDIDO`)
min
#M?ximo
max <- max(`PESO PERDIDO`)
max
#Rango
rango <- max-min
rango
#Media
media <- mean(`PESO PERDIDO`)
media
#Desviaci?n est?ndar
desv_estandar <- sd(`PESO PERDIDO`)
desv_estandar
#Coeficiente de variaci?n
coef_var <- desv_estandar/media
coef_var
##Cuartil 1
q1 <- unname(quantile(`PESO PERDIDO`, 0.25))
q1
##Cuartil 3
q3 <- unname(quantile(`PESO PERDIDO`, 0.75))
q3
#Rango intercuartil
ric <- q3 - q1
ric
#Cerco inferior
cerco_inf <- q1 - 1.5*ric
cerco_inf
#Cerco superior
cerco_sup <- q3 + 1.5*ric
cerco_sup
#Ver cuales se salen de los cercos
atipicos <- filter(datos, `PESO PERDIDO`<cerco_inf | `PESO PERDIDO`>cerco_sup)
kable(atipicos) %>% kable_styling(full_width = F)
datos_sinatipicos <- filter(datos,`PESO PERDIDO`>=cerco_inf & `PESO PERDIDO`<=cerco_sup)
max <- max(datos_sinatipicos$`PESO PERDIDO`)
max
dt_programa3 <- datos_sinatipicos %>%
filter(PROGRAMA==3)
max <- max(dt_programa3$`PESO PERDIDO`)
max
attach(datos_sinatipicos)
# colocar labels a una variable categorica: importante Respetar el orden
Genero <- factor(datos_sinatipicos$GENERO, labels= c ("femenino", "masculino"))
barchart(Genero)
boxplot_edad = ggplot(datos_sinatipicos, aes(x='', y=EDAD)) +
geom_boxplot(color='grey10', width=0.5) +
labs(x='', y='Edad', title='Gr?fico de cajas para la edad') +
theme_minimal()
ggplotly(boxplot_edad)
summary(datos_sinatipicos)
descriptivas <- stat.desc(datos_sinatipicos$EDAD)
descriptivas
options(scipen = 999999)
tabla <- table(GENERO)
pie(tabla, main="G?nero de los clientes")
tabla.1 <- freq(GENERO)
tabla.1
edad2 <- cut(EDAD, c(seq(from = 19, to = 65, by = 10),65), include.lowest=TRUE)
tabla.2 <- freq(ordered(edad2), plot = TRUE)
tabla.3 <- crosstab(GENERO, edad2, prop.c = TRUE, plot=FALSE)
tabla.3
tabla.4 <- crosstab(GENERO, edad2, prop.r = TRUE,plot=FALSE)
tabla.4
eda(EDAD)
t.test(EDAD, mu=40)
t.test(EDAD, mu=40, alternative = "less")
t.test(EDAD, mu=40, alternative = "greater")
# Cargar la biblioteca ggplot2
library(ggplot2)
# Crear un conjunto de datos simulados con una distribución normal estándar
set.seed(123)  # Establecer una semilla para la reproducibilidad
datos <- rnorm(1000)  # Generar 1000 valores de una distribución normal estándar
# Crear un conjunto de datos simulados con una distribución normal estándar
set.seed(123)  # Establecer una semilla para la reproducibilidad
datos <- rnorm(1000)  # Generar 1000 valores de una distribución normal estándar
# Crear un gráfico de densidad de probabilidad
ggplot(data = data.frame(x = datos), aes(x = x)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Distribución Normal Estándar", x = "Valores", y = "Densidad de Probabilidad")
tau1 <- 28.5
tau2 <- 33.5
# Media y desviación estándar
media <- 31
desviacion <- 2.5
# Calcular la probabilidad entre tau1 y tau2 en la distribución normal
probabilidad <- pnorm(tau2, mean = media, sd = desviacion) - pnorm(tau1, mean = media, sd = desviacion)
# Mostrar la probabilidad
print(probabilidad)
n <- 20
x <- seq(0,n,length=n+1)
pclass <- 0.5
p1 <- 0.2
p2 <- 0.4
p3 <- 0.6
p4 <- 0.8
yclass <- dbinom(x,n,pclass)
y1 <- dbinom(x,n,p1)
y2 <- dbinom(x,n,p2)
y3 <- dbinom(x,n,p3)
y4 <- dbinom(x,n,p4)
pvec <- x/n
lnLclass <- log(yclass/max(yclass))
lnL1 <- log(y1/max(y1))
lnL2 <- log(y2/max(y2))
lnL3 <- log(y3/max(y3))
lnL4 <- log(y4/max(y4))
par(mfrow=c(1,2))
plot(x,yclass,typ="l",col="blue",lwd=1,xlab="Number of successes, a", ylab="Probability")
plot(pvec,lnLclass,typ="l",col="blue",lwd=1,xlab="Binomial parameter, p", ylab="ln Likelihood",xaxt="n")
v1 = seq(0,1,by=0.1)
axis(side=1,at=v1,labels=v1,cex.axis=0.5)
lines(rep(pclass,times=50),seq(min(lnLclass),max(lnLclass),length=50),typ="l",lty="dotted",col="blue",lwd=1)
par(mfrow=c(1,2))
plot(x,y1,typ="l",col="blue",lwd=1,xlab="Number of successes, a", ylab="Probability")
lines(x,y2,typ="l",col="red",lwd=1)
lines(x,y3,typ="l",col="green",lwd=1)
lines(x,y4,typ="l",col="purple",lwd=1)
plot(pvec,lnL1,typ="l",col="blue",lwd=1,xlab="Binomial parameter, p", ylab="ln Likelihood", cex.axis=0.8)
lines(rep(p1,times=50),seq(min(lnL1),max(lnL1),length=50),typ="l",lty="dotted",col="blue",lwd=1)
lines(pvec,lnL2,typ="l",col="red",lwd=1)
lines(rep(p2,times=50),seq(min(lnL1),max(lnL1),length=50),typ="l",lty="dotted",col="red",lwd=1)
lines(pvec,lnL3,typ="l",col="green",lwd=1)
lines(rep(p3,times=50),seq(min(lnL1),max(lnL1),length=50),typ="l",lty="dotted",col="green",lwd=1)
lines(pvec,lnL4,typ="l",col="purple",lwd=1)
lines(rep(p4,times=50),seq(min(lnL1),max(lnL1),length=50),typ="l",lty="dotted",col="purple",lwd=1)
#Intepretation is for homework
#Intepretation is for homework
#Intepretation is for homework
#Intepretation is for homework
# Specify parameters for the normal distribution
mu <- 0      # Mean
sigma <- 1   # Standard Deviation
# Create a vector of candidate values for the parameter mu (mean)
mu_vec <- seq(-2, 2, length = 100)
# Compute the likelihood function for the normal distribution with unbiased estimator
likelihood <- exp(-sum((x - mu)^2) / (2 * (n - 1))) / ((2 * pi * (n - 1)) ^ 0.5)
# Create a plot of the likelihood function
plot(mu_vec, likelihood, type = "l", col = "blue", lwd = 2,
xlab = "Mean (mu)", ylab = "Likelihood",
main = "Likelihood Function for Normal Distribution (Unbiased Variance)")
# Find the maximum likelihood estimate (MLE) for mu
mle_mu <- mu_vec[which.max(likelihood)]
# Add a vertical line at the MLE
abline(v = mle_mu, col = "red", lty = 2)
text(mle_mu, max(likelihood), labels = paste("MLE: ", round(mle_mu, 2)), pos = 2)
# Specify parameters for the normal distribution
mu <- 0      # Mean
sigma <- 1   # Standard Deviation
# Create a vector of candidate values for the parameter mu (mean)
mu_vec <- seq(-2, 2, length = 100)
# Create a vector of candidate values for the parameter mu (mean)
mu_vec <- seq(-2, 2, length = 100)
# Compute the likelihood function for the normal distribution with unbiased estimator
likelihood <- exp(-sum((x - mu)^2) / (2 * (n - 1))) / ((2 * pi * (n - 1)) ^ 0.5)
# Create a plot of the likelihood function
plot(mu_vec, likelihood, type = "l", col = "blue", lwd = 2,
xlab = "Mean (mu)", ylab = "Likelihood",
main = "Likelihood Function for Normal Distribution (Unbiased Variance)")
# Sample data
data <- c(23, 25, 28, 30, 31, 32, 35, 36, 38, 40)
# Calculate sample mean and unbiased sample variance
sample_mean <- mean(data)
sample_variance <- var(data)
# Create a sequence of candidate values for the population mean (mu)
mu_values <- seq(20, 50, by = 0.1)
# Calculate the likelihood for each mu value using the normal distribution
likelihood_values <- dnorm(data, mean = mu_values, sd = sqrt(sample_variance))
# Plot the likelihood function
plot(mu_values, likelihood_values, type = "l", col = "blue",
xlab = "Population Mean (mu)", ylab = "Likelihood",
main = "Likelihood Function for Normal Distribution",
xlim = c(min(mu_values), max(mu_values)),
ylim = c(0, max(likelihood_values)))
# Add a vertical line at the sample mean
abline(v = sample_mean, col = "red", lty = 2)
# Add a legend
legend("topright", legend = c("Likelihood", "Sample Mean"),
col = c("blue", "red"), lty = c(1, 2))
